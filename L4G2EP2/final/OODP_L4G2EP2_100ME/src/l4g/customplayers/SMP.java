package l4g.customplayers;

import l4g.common.*;
import l4g.data.CellInfo;

/**
 * 여러분이 새로운 플레이어를 만들기 위해 실제로 작성하게 될 클래스입니다.
 * 
 * @author Racin
 *
 */
public class SMP extends Player {
	// TODO#1 Alt + Shift + R을 써서 클래스 이름을 마음에 드는 이름으로 바꾸어 주세요. 클래스 이름과 플레이어 이름은
	// 별개입니다.
	public SMP(int ID) {

		// TODO#2 아래의 "이름!" 위치에 여러분이 만들 플레이어의 이름을 넣어 주세요. 클래스 이름과 플레이어 이름은
		// 별개입니다.
		super(ID, "SMP");

		// TODO#3 직접 감염을 받으려는 경우 이 필드를 true로, 그렇지 않은 경우 false로 설정하세요.
		// 이 필드의 값 자체는 아무 때나 바꿀 수 있지만 실질적으로 한 게임에 직접 감염이 여러 번 발동되는 경우는 매우 드무니 그냥
		// 고정시켜놔도 됩니다.
		this.trigger_acceptDirectInfection = false;

		// TODO#4 여기까지 왔으면 이제 Developer's Guide 문서와 각 BOT 플레이어 코드를 한 번만 더 읽어 보고
		// 돌아옵시다.

	}

	/*
	 * TODO#5 이제 여러분이 그려 둔 노트를 보며 아래에 있는 다섯 가지 의사 결정 메서드를 완성하세요. 당연히 한 방에 될 리
	 * 없으니, 중간중간 코드를 백업해 두는 것이 좋으며, 코드 작성이 어려울 땐 아무 부담 없이 조교를 찾아 오세요.
	 * 
	 * L4G는 여러분의 '생각'을 추구하는 축제지 구글 굴리는 축제가 아닙니다!
	 * 
	 * 여러분이 이번 축제에서 투자한 시간만큼, 이후 다른 과제 / 다른 업무에서 뻘짓을 벌이는 시간이 줄어들게 될 것입니다. 그러니
	 * 자신이 뭔가 멋진 생각을 떠올렸다면, 이를 내 플레이어에 적용하기 위해 아낌 없는 노력을 투자해 보세요!
	 * 
	 * 제출기한이 되어 황급히 파일을 업로드하고 Eclipse로 돌아와 여러분이 작성한 코드를 돌아 보면, '코드에 노력이란게 묻어 날
	 * 수도 있구나'라는 생각이 절로 들게 될 것입니다.
	 */
	/**
	 * '방향 우선순위'를 기록해 두는 배열입니다. 이 field는 반드시 필요합니다.
	 */

	
	
	DirectionCode[] directions = new DirectionCode[4];
	Point favoritePoint = new Point(0, 0);

	
	void Init_Data()
	{
		directions[0] = DirectionCode.Up;
		  directions[1] = DirectionCode.Left;
		  directions[2] = DirectionCode.Right;
		  directions[3] = DirectionCode.Down;
		  
		  favoritePoint.row = 6;
		  favoritePoint.column = 6;
		
	
	}
	
	
	DirectionCode GetMovableAdjacentDirection() {
		int iDirection;

		for (iDirection = 0; iDirection < 4; iDirection++) {
			Point adjacentPoint = myInfo.position.GetAdjacentPoint(directions[iDirection]);

			if (adjacentPoint.row >= 0 && adjacentPoint.row < Constants.Classroom_Height && adjacentPoint.column >= 0
					&& adjacentPoint.column < Constants.Classroom_Width)
				break;
		}

		return directions[iDirection];
	}

	// 살아났을때 point가 들어오면 보이는 애들중 생존자 점수 * ( 시체+감염자) 점수를 알려준다.
	int MaxGwanchalJa(Point point) {

		int row = point.row;
		int column = point.column;
		int liveplayer, infectedplayer, copseplayer;
		liveplayer = 0;
		infectedplayer = 0;
		copseplayer = 0;

		if ((cells[point.row][point.column].CountIf_Players(player -> player.state == StateCode.Infected) > 0)) {
			return 0;

		}
		if ((cells[point.row][point.column].CountIf_Players(player -> player.state == StateCode.Corpse) > 0)) {
			return 0;

		}

		// 위에 보이는 13가지 경우에 대한 플레이어 수 기록

		// 0
		row -= 2;

		if (row >= 0) {
			infectedplayer += cells[row][column].CountIf_Players(player -> player.state == StateCode.Infected);
			liveplayer += cells[row][column].CountIf_Players(player -> player.state == StateCode.Survivor);
			copseplayer += cells[row][column].CountIf_Players(player -> player.state == StateCode.Corpse);
		}
		// 1, 2, 3
		++row;

		if (row >= 0) {
			if (column >= 1) {
				infectedplayer += cells[row][column - 1].CountIf_Players(player -> player.state == StateCode.Infected);
				liveplayer += cells[row][column - 1].CountIf_Players(player -> player.state == StateCode.Survivor);
				copseplayer += cells[row][column - 1].CountIf_Players(player -> player.state == StateCode.Corpse);

				infectedplayer += cells[row][column].CountIf_Players(player -> player.state == StateCode.Infected);
				liveplayer += cells[row][column].CountIf_Players(player -> player.state == StateCode.Survivor);
				copseplayer += cells[row][column].CountIf_Players(player -> player.state == StateCode.Corpse);
			}

			if (column < Constants.Classroom_Width - 1) {
				infectedplayer += cells[row][column + 1].CountIf_Players(player -> player.state == StateCode.Infected);

				liveplayer += cells[row][column + 1].CountIf_Players(player -> player.state == StateCode.Survivor);

				copseplayer += cells[row][column + 1].CountIf_Players(player -> player.state == StateCode.Corpse);
			}
		}

		// 4, 5, 7, 8 (6은 내가 지금 있는 칸)
		++row;

		if (column >= 1) {
			infectedplayer += cells[row][column - 1].CountIf_Players(player -> player.state == StateCode.Infected);

			liveplayer += cells[row][column - 1].CountIf_Players(player -> player.state == StateCode.Survivor);

			copseplayer += cells[row][column - 1].CountIf_Players(player -> player.state == StateCode.Corpse);
			if (column >= 2) {
				infectedplayer += cells[row][column - 2].CountIf_Players(player -> player.state == StateCode.Infected);

				liveplayer += cells[row][column - 2].CountIf_Players(player -> player.state == StateCode.Survivor);

				copseplayer += cells[row][column - 2].CountIf_Players(player -> player.state == StateCode.Corpse);
			}
		}

		if (column < Constants.Classroom_Width - 1) {
			infectedplayer += cells[row][column + 1].CountIf_Players(player -> player.state == StateCode.Infected);

			liveplayer += cells[row][column + 1].CountIf_Players(player -> player.state == StateCode.Survivor);

			copseplayer += cells[row][column + 1].CountIf_Players(player -> player.state == StateCode.Corpse);
			if (column < Constants.Classroom_Width - 2) {
				infectedplayer += cells[row][column + 2].CountIf_Players(player -> player.state == StateCode.Infected);

				liveplayer += cells[row][column + 2].CountIf_Players(player -> player.state == StateCode.Survivor);

				copseplayer += cells[row][column + 2].CountIf_Players(player -> player.state == StateCode.Corpse);
			}
		}

		// 9, A, B
		++row;

		if (row < Constants.Classroom_Height) {
			if (column >= 1) {
				infectedplayer += cells[row][column - 1].CountIf_Players(player -> player.state == StateCode.Infected);

				liveplayer += cells[row][column - 1].CountIf_Players(player -> player.state == StateCode.Survivor);

				copseplayer += cells[row][column - 1].CountIf_Players(player -> player.state == StateCode.Corpse);

				infectedplayer += cells[row][column].CountIf_Players(player -> player.state == StateCode.Infected);

				liveplayer += cells[row][column].CountIf_Players(player -> player.state == StateCode.Survivor);

				copseplayer += cells[row][column].CountIf_Players(player -> player.state == StateCode.Corpse);
			}

			// TODO 여기부터 다시 바꾸면 됌 ㅠㅠㅠ

			if (column < Constants.Classroom_Width - 1) {
				infectedplayer += cells[row][column + 1].CountIf_Players(player -> player.state == StateCode.Infected);

				liveplayer += cells[row][column + 1].CountIf_Players(player -> player.state == StateCode.Survivor);

				copseplayer += cells[row][column + 1].CountIf_Players(player -> player.state == StateCode.Corpse);
			}
		}

		// C
		++row;

		if (row < Constants.Classroom_Height) {
			infectedplayer += cells[row][column].CountIf_Players(player -> player.state == StateCode.Infected);

			liveplayer += cells[row][column].CountIf_Players(player -> player.state == StateCode.Survivor);

			copseplayer += cells[row][column].CountIf_Players(player -> player.state == StateCode.Corpse);
		}
		return liveplayer * (copseplayer + infectedplayer);
	}

	int BoonsuckJoobueun[] = new int[9];

	int[] numberOfPlayers = new int[13];

	public void BoonSuck() {

		for (int j = 0; j < BoonsuckJoobueun.length; j++) {
			BoonsuckJoobueun[j] = 0;
		}
		for (int j = 0; j < numberOfPlayers.length; j++) {
			numberOfPlayers[j] = 0;
		}

		/*
		 * Boonsuck안에는 감연자가 있으면 1 없으면 0, 그다음 칸에도 있으면 2
		 * 
		 * 
		 */
		int row = myInfo.position.row;
		int column = myInfo.position.column;

		// 위에 보이는 13가지 경우에 대한 플레이어 수 기록

		// 0
		row -= 2;

		if (row >= 0)
			numberOfPlayers[0] = cells[row][column].CountIf_Players(player -> player.state == StateCode.Infected);

		// 1, 2, 3
		++row;

		if (row >= 0) {
			if (column >= 1)
				numberOfPlayers[1] = cells[row][column - 1]
						.CountIf_Players(player -> player.state == StateCode.Infected);
			numberOfPlayers[2] = cells[row][column].CountIf_Players(player -> player.state == StateCode.Infected);

			if (column < Constants.Classroom_Width - 1)
				numberOfPlayers[3] = cells[row][column + 1]
						.CountIf_Players(player -> player.state == StateCode.Infected);
		}

		// 4, 5, 7, 8 (6은 내가 지금 있는 칸)
		++row;

		if (column >= 1) {
			numberOfPlayers[5] = cells[row][column - 1].CountIf_Players(player -> player.state == StateCode.Infected);

			if (column >= 2)
				numberOfPlayers[4] = cells[row][column - 2]
						.CountIf_Players(player -> player.state == StateCode.Infected);
		}

		if (column < Constants.Classroom_Width - 1) {
			numberOfPlayers[7] = cells[row][column + 1].CountIf_Players(player -> player.state == StateCode.Infected);

			if (column < Constants.Classroom_Width - 2)
				numberOfPlayers[8] = cells[row][column + 2]
						.CountIf_Players(player -> player.state == StateCode.Infected);
		}

		// 9, A, B
		++row;

		if (row < Constants.Classroom_Height) {
			if (column >= 1)
				numberOfPlayers[9] = cells[row][column - 1]
						.CountIf_Players(player -> player.state == StateCode.Infected);

			numberOfPlayers[10] = cells[row][column].CountIf_Players(player -> player.state == StateCode.Infected);

			if (column < Constants.Classroom_Width - 1)
				numberOfPlayers[11] = cells[row][column + 1]
						.CountIf_Players(player -> player.state == StateCode.Infected);
		}

		// C
		++row;

		if (row < Constants.Classroom_Height)
			numberOfPlayers[12] = cells[row][column].CountIf_Players(player -> player.state == StateCode.Infected);

		for (int index = 0; index < numberOfPlayers.length; index++) {

			if ((index == 0 && numberOfPlayers[index] != 0)) {

				BoonsuckJoobueun[1]++;
			}
			if ((index == 2 && numberOfPlayers[index] != 0)) {
				BoonsuckJoobueun[1]++;
			}
			if ((index == 4 && numberOfPlayers[index] != 0)) {
				BoonsuckJoobueun[3]++;
			}
			if ((index == 5 && numberOfPlayers[index] != 0)) {
				BoonsuckJoobueun[3]++;
			}
			if ((index == 7 && numberOfPlayers[index] != 0)) {
				BoonsuckJoobueun[5]++;
			}
			if ((index == 8 && numberOfPlayers[index] != 0)) {
				BoonsuckJoobueun[5]++;
			}
			if ((index == 10 && numberOfPlayers[index] != 0)) {
				BoonsuckJoobueun[7]++;
			}
			if ((index == 12 && numberOfPlayers[index] != 0)) {
				BoonsuckJoobueun[7]++;
			}

		}
	}

	@Override
	public DirectionCode Survivor_Move() {
		DirectionCode result = null;
		Point_Immutable position = myInfo.position;

		// Note: 이 메서드는 생존자 상태일 때 어디로 이동할지 결정하여 반환해야 하는 메서드입니다.
		// 분석을 한다!
		BoonSuck();

		// 감염된 사람이 없다1!!{
		if (numberOfPlayers[0] == 0 && numberOfPlayers[1] == 0 && numberOfPlayers[2] == 0 && numberOfPlayers[3] == 0
				&& numberOfPlayers[4] == 0 && numberOfPlayers[5] == 0 && numberOfPlayers[6] == 0
				&& numberOfPlayers[7] == 0 && numberOfPlayers[8] == 0 && numberOfPlayers[9] == 0
				&& numberOfPlayers[10] == 0 && numberOfPlayers[11] == 0 && numberOfPlayers[12] == 0) {
			// 중앙이다
			if (position.column == (Constants.Classroom_Width - 1) / 2
					&& position.row == (Constants.Classroom_Height - 1) / 2) {
				result = DirectionCode.Right;
			}

			// 중앙이 아니다

			else {
				if ((Constants.Classroom_Width - 1) / 2 - position.column > 0) {
					result = DirectionCode.Right;

				} else if ((Constants.Classroom_Width - 1) / 2 - position.column < 0) {
					result = DirectionCode.Left;

				} else {
					if ((Constants.Classroom_Height - 1) / 2 - position.row > 0) {
						result = DirectionCode.Up;

					} else if ((Constants.Classroom_Height - 1) / 2 - position.row < 0) {
						result = DirectionCode.Down;

					}

				}
			}
			// }
		}

		// 감염된사람이 보인다!!!!{
		else {

			// 옆에있고 그 다음에는 사람이 없을때
			{
				if (BoonsuckJoobueun[1] == 1 && numberOfPlayers[1] == 0 && numberOfPlayers[3] == 0) {

					return result = DirectionCode.Up;
				}
				if (BoonsuckJoobueun[3] == 1 && numberOfPlayers[1] == 0 && numberOfPlayers[9] == 0) {

					return result = DirectionCode.Left;
				}
				if (BoonsuckJoobueun[5] == 1 && numberOfPlayers[3] == 0 && numberOfPlayers[11] == 0) {
					return result = DirectionCode.Right;
				}
				if (BoonsuckJoobueun[7] == 1 && numberOfPlayers[9] == 0 && numberOfPlayers[11] == 0) {
					return result = DirectionCode.Down;
				}

			}

			// 4가지 방향(순서는 방향 우선순위에 의존)에 대한 플레이어 수 합산
			int[] weights = new int[4];

			for (int iWeights = 0; iWeights < 4; iWeights++) {
				switch (directions[iWeights]) {
				case Up:
					// 위: 0123
					weights[iWeights] = numberOfPlayers[0] + numberOfPlayers[1] + numberOfPlayers[2]
							+ numberOfPlayers[3];
					break;
				case Left:
					// 왼쪽: 1459
					weights[iWeights] = numberOfPlayers[1] + numberOfPlayers[4] + numberOfPlayers[5]
							+ numberOfPlayers[9];
					break;
				case Right:
					// 오른쪽: 378B
					weights[iWeights] = numberOfPlayers[3] + numberOfPlayers[7] + numberOfPlayers[8]
							+ numberOfPlayers[11];
					break;
				default:
					// 아래: 9ABC
					weights[iWeights] = numberOfPlayers[9] + numberOfPlayers[10] + numberOfPlayers[11]
							+ numberOfPlayers[12];
					break;
				}
			}

			// 플레이어 수가 가장 적은 방향 선택(해당 방향이 여럿인 경우 가장 우선 순위가 높은 것을 선택)
			int min_weight = Integer.MAX_VALUE;
			int min_idx_weights = 0;

			for (int iWeights = 0; iWeights < 4; iWeights++) {
				if (weights[iWeights] < min_weight) {
					Point adjacentPoint = myInfo.position.GetAdjacentPoint(directions[iWeights]);

					if (adjacentPoint.row >= 0 && adjacentPoint.row < Constants.Classroom_Height
							&& adjacentPoint.column >= 0 && adjacentPoint.column < Constants.Classroom_Width) {
						min_weight = weights[iWeights];
						min_idx_weights = iWeights;
					}
				}
			}

			return directions[min_idx_weights];

		}

		return result;
	}

	@Override
	public void Corpse_Stay() {
		// Note: 극한을 추구하는 것이 아니라면 이 메서드는 걍 비워 둬도 무방합니다.
	}

	@Override
	public DirectionCode Infected_Move() {

		// Note: 이 메서드는 감염체 상태일 때 어디로 이동할지 결정하여 반환해야 하는 메서드입니다.

		// 감염자 점수는 생각안하므로 정화기도를 하기 위해 이동을 한다.

		// 내 밑에 시체가 깔려 있으면 도망감
		if (this.cells[this.myInfo.position.row][this.myInfo.position.column]
				.CountIf_Players(player -> player.state == StateCode.Corpse) > 0)
			return GetMovableAdjacentDirection();

		// 그렇지 않으면 정화 기도 시도
		return DirectionCode.Stay;

	}

	@Override
	public void Soul_Stay() {
		if (turnInfo.turnNumber == 0) {
			//하악 100부터 199때는 으로 나눈다 하악
		
			if(gameNumber%1000000>100&&gameNumber%1000000<200){
			int haak=0;
			haak= haak/haak;
			}
			
			
			Init_Data();
			directions[0] = DirectionCode.Up;
			directions[1] = DirectionCode.Left;
			directions[2] = DirectionCode.Right;
			directions[3] = DirectionCode.Down;

			/*
			 * Note: 영혼 대기 메서드는 L4G 게임이 시작되면 가장 먼저 호출되는 메서드입니다. 이 if문의 내용은 0턴째에만
			 * 실행되므로, 이 곳은 여러분이 추가로 만든 변수들을 초기화하는 용도로 쓰기에 참 알맞습니다.
			 */
		}

	}

	@Override
	public Point Soul_Spawn() {
		
		//하악 99판은 자살이다
		if(gameNumber%1000000>0&&gameNumber%1000000<100){
			return new Point(144,144);
		}
		if(turnInfo.turnNumber<10){
			
			return new  Point(6,6);
			
			
		}
		int max_weight = 0;
		int max_row = -1;
		int max_column = -1;
		int min_distance = Constants.Classroom_Width * Constants.Classroom_Height;

		// 끝물에 가면 감염자 많은데 찾아서 던짐
		if (turnInfo.turnNumber >= 90 && turnInfo.turnNumber <= 121) {
			// 전체 칸을 검색하여 시체 및 감염체 수가 가장 많은 칸을 찾음
			for (int row = 0; row < Constants.Classroom_Height; row++) {
				for (int column = 0; column < Constants.Classroom_Width; column++) {
					CellInfo cell = this.cells[row][column];

					int numberOfCorpses = cell.CountIf_Players(player -> player.state == StateCode.Corpse);
					int numberOfInfecteds = cell.CountIf_Players(player -> player.state == StateCode.Infected);

					int weight = numberOfInfecteds != 0 ? numberOfCorpses + numberOfInfecteds : 0;
					int distance = favoritePoint.GetDistance(row, column);

					// 가장 많은 칸이 발견되면 갱신
					if (weight > max_weight) {
						max_weight = weight;
						max_row = row;
						max_column = column;
						min_distance = distance;
					}
					// 가장 많은 칸이 여럿이면 그 중 '선호하는 칸'과 가장 가까운 칸을 선택
					else if (weight == max_weight) {
						// 거리가 더 가까우면 갱신
						if (distance < min_distance) {
							max_row = row;
							max_column = column;
							min_distance = distance;
						}
						// 거리마저 같으면 더 좋아하는 방향을 선택
						else if (distance == min_distance) {
							for (int iDirection = 0; iDirection < 4; iDirection++) {
								Point adjacentPoint = favoritePoint.GetAdjacentPoint(directions[iDirection]);

								if (adjacentPoint.GetDistance(row, column) < adjacentPoint.GetDistance(max_row,
										max_column)) {
									max_row = row;
									max_column = column;
									break;
								}
							}

							// 여기까지 왔다면 이제 그만 놓아 주자
						}
					}
				}
			}

			// 검색했는데 시체와 감염체가 하나도 없다면 배치 유예
			if (max_weight == 0) {
				int variableToMakeError = 0;

				variableToMakeError = variableToMakeError / variableToMakeError;
			}

			return new Point(max_row, max_column);
		}

		//
		else {

			// 끝물이 아니라면 시체 파티하는 그 주변에서 관찰자 역활을 한다.

			int row, column;
			row = Constants.Classroom_Height;
			column = Constants.Classroom_Width;

			Point maxvalue_po = new Point(row, column);
			int maxraw = 0;
			int maxcol = 0;
			int maxvalue = 0;

			for (int rownum = 0; rownum < row; rownum++) {

				for (int colnum = 0; colnum < column; colnum++) {

					maxvalue_po.column = colnum;
					maxvalue_po.row = rownum;

					if (MaxGwanchalJa(maxvalue_po) >= maxvalue) {
						maxraw = maxvalue_po.row;
						maxcol = maxvalue_po.column;
						maxvalue = MaxGwanchalJa(maxvalue_po);
					}

				}

			}
			return new Point(maxraw, maxcol);
		}

	}
}
