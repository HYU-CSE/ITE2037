package l4g.customplayers;

import l4g.common.*;
import l4g.data.CellInfo;

/**
 * 여러분이 새로운 플레이어를 만들기 위해 실제로 작성하게 될 클래스입니다.
 * 
 * @author Racin
 *
 */
public class Player_YangSangheon extends Player
{
	// TODO#1 Alt + Shift + R을 써서 클래스 이름을 마음에 드는 이름으로 바꾸어 주세요. 클래스 이름과 플레이어 이름은 별개입니다.
	public Player_YangSangheon(int ID)
	{
		
		// TODO#2 아래의 "이름!" 위치에 여러분이 만들 플레이어의 이름을 넣어 주세요. 클래스 이름과 플레이어 이름은 별개입니다.
		super(ID, "중간만하자");
		
		// TODO#3 직접 감염을 받으려는 경우 이 필드를 true로, 그렇지 않은 경우 false로 설정하세요.
		// 이 필드의 값 자체는 아무 때나 바꿀 수 있지만 실질적으로 한 게임에 직접 감염이 여러 번 발동되는 경우는 매우 드무니 그냥 고정시켜놔도 됩니다.
		this.trigger_acceptDirectInfection = false;
		
		
		// TODO#4 여기까지 왔으면 이제 Developer's Guide 문서와 각 BOT 플레이어 코드를 한 번만 더 읽어 보고 돌아옵시다.
		
		
	}
	
	/*
	 * TODO#5	이제 여러분이 그려 둔 노트를 보며 아래에 있는 다섯 가지 의사 결정 메서드를 완성하세요.
	 * 			당연히 한 방에 될 리 없으니, 중간중간 코드를 백업해 두는 것이 좋으며,
	 * 			코드 작성이 어려울 땐 아무 부담 없이 조교를 찾아 오세요.
	 * 
	 * 			L4G는 여러분의 '생각'을 추구하는 축제지 구글 굴리는 축제가 아닙니다!
	 * 
	 * 			여러분이 이번 축제에서 투자한 시간만큼, 이후 다른 과제 / 다른 업무에서 뻘짓을 벌이는 시간이 줄어들게 될 것입니다.
	 * 			그러니 자신이 뭔가 멋진 생각을 떠올렸다면, 이를 내 플레이어에 적용하기 위해 아낌 없는 노력을 투자해 보세요!
	 * 
	 * 			제출기한이 되어 황급히 파일을 업로드하고 Eclipse로 돌아와 여러분이 작성한 코드를 돌아 보면,
	 * 			'코드에 노력이란게 묻어 날 수도 있구나'라는 생각이 절로 들게 될 것입니다.
	 */
	
	//////////////////////////////////여기서부터 봇코드
	/**
	 * '방향 우선순위'를 기록해 두는 배열입니다.
	 * 이 field는 반드시 필요합니다.
	 */
	DirectionCode[] directions = new DirectionCode[4];
	
	Point favoritePoint = new Point(0, 0);
	
	/**
	 * '방향 우선순위'와 '선호하는 칸'을 설정합니다.
	 * 이 메서드는 Soul_Stay()에서 단 한 번 호출됩니다.
	 * 이 메서드는 반드시 필요합니다.
	 */
	void Init_Data()
	{
		/*
		 * 여러분이 작성하는 플레이어는 언제나 강의실에 단 한 명 존재하므로
		 * 사실 아래의 코드를 쓸 필요 없이
		 */
		 directions[0] = DirectionCode.Up;
		 directions[1] = DirectionCode.Left;
		 directions[2] = DirectionCode.Right;
	     directions[3] = DirectionCode.Down;
		  
		 favoritePoint.row = 2;
		 favoritePoint.column = 2;
		  
		 // ...와 같이 여러분이 좋아하는 우선 순위를 그냥 바로 할당해 써도 무방합니다.
		 // (Bot들은 똑같은 클래스의 인스턴스가 여럿 존재하므로 이런 짓을 해야 합니다).
		 //
		

	}
	
	/**
	 * 방향 우선순위를 고려하여, 현재 이동 가능한 방향을 하나 반환합니다.
	 * 이 메서드는 반드시 필요합니다.
	 */
	DirectionCode GetMovableAdjacentDirection()
	{
		int iDirection;
		
		for ( iDirection = 0; iDirection < 4; iDirection++ )
		{
			Point adjacentPoint = myInfo.position.GetAdjacentPoint(directions[iDirection]);
			
			if ( adjacentPoint.row >= 0 && adjacentPoint.row < Constants.Classroom_Height && adjacentPoint.column >= 0 && adjacentPoint.column < Constants.Classroom_Width )
				break;
		}
		
		return directions[iDirection];
	}
	///////////////////////////////////////////////////////////여기까지 봇코드
	
	@Override
	public DirectionCode Survivor_Move()
	{
		DirectionCode result = null;
		
		// Note: 이 메서드는 생존자 상태일 때 어디로 이동할지 결정하여 반환해야 하는 메서드입니다.
		
		/**내 생각**/
		//최대한 오래 생존하는것은 운에 맡기고, 총 발견횟수 점수를 노리고자 
		//시야를 가장 넓게 사용할수 있는 범위인 [(2,2)-(2,10)-(10,2)-(10,10)] 경로(정사각형 모양)를 반시계방향으로만 움직인다.
		//일찍죽게되도 뭐 어쩔수 없다.
		
		if(myInfo.position.row< 10&&myInfo.position.row>= 2&&myInfo.position.column== 2){
				result=DirectionCode.Down;//(2,2)~(9,2)일때 아래로 이동
			}
		else if(myInfo.position.row==10&&myInfo.position.column>=2&&myInfo.position.column<10){
				result=DirectionCode.Right;//(10,2)~(10,9)일때 오른쪽으로 이동
			}
		else if(myInfo.position.row>2&&myInfo.position.row<=10&&myInfo.position.column==10){
				result = DirectionCode.Up;//(10,10)~(3,10)일때 위쪽으로 이동
			}
		else if(myInfo.position.row==2&&myInfo.position.column<=10&&myInfo.position.column> 2){
			result = DirectionCode.Down;//(2,10)~(2,3)일때 왼쪽으로 이동
		}
			
		return result;
	}

	@Override
	public void Corpse_Stay()
	{
		// Note: 극한을 추구하는 것이 아니라면 이 메서드는 걍 비워 둬도 무방합니다.
		
		//그래서 비워둠.
	}

	@Override
	public DirectionCode Infected_Move()
	{
		DirectionCode result = null;
		
		// Note: 이 메서드는 감염체 상태일 때 어디로 이동할지 결정하여 반환해야 하는 메서드입니다.
		
		/**내 생각**/
		//다음과같은 명령을 따른다.
		//일단 감염자 상태가 되면, 다른 감염자와 생존자는 신경쓰지 않는다.(어차피 영혼상태에서 감염자가 가장 많은 곳에서 부활하기 때문)
		//1. 시체가 같은칸에 하나라도 존재하는경우 그위치에서 움직이지 않는다.
		//2. 내위치에 시체가 없고, 상하좌우4칸에 시체가 존재하면 시체가 가장 많은 쪽으로 이동한다.(시체의 수가 같은 칸이 2개 이상일 경우 특정한 방향(상하좌우 순서)으로 이동한다.)
		//3. 내 위치와 상하좌우4칸에 시체가 하나도 존재하지 않으면 그 위치에서 움직이지 않는다.(참회기도, 혹은 자살하는 부활자를 기다림)
		//CellInfo cell = this.cells[myInfo.position.row][myInfo.position.column];
		if(this.cells[myInfo.position.row][myInfo.position.column].CountIf_Players(player -> player.state == StateCode.Corpse)>0){//내 위치에 시체가 하나라도 있으면 stay
			result= DirectionCode.Stay;
		}
		else{//내위치에 시체가 없는경우
			//일단 상하좌우에 존재하는 시체 개수를 저장할 변수선언
			int max_number_of_C=1;//시체가 상하좌우 어딘가엔 존재하므로 초기화값은 1
			int index = -1; //상하좌우중 어디에 갈지 정할때 쓰는 숫자 (0123중 하나)
			int[] number_of_C = new int[4];//상하좌우 순서대로 0123에 저장
			if (myInfo.position.row != 0)
				number_of_C[0] = this.cells[myInfo.position.row - 1][myInfo.position.column]
						.CountIf_Players(player -> player.state == StateCode.Corpse);
			if (myInfo.position.row != Constants.Classroom_Height - 1)
				number_of_C[1] = this.cells[myInfo.position.row + 1][myInfo.position.column]
						.CountIf_Players(player -> player.state == StateCode.Corpse);
			if (myInfo.position.column != 0)
				number_of_C[2] = this.cells[myInfo.position.row][myInfo.position.column - 1]
						.CountIf_Players(player -> player.state == StateCode.Corpse);
			if (myInfo.position.column != Constants.Classroom_Width - 1)
				number_of_C[3] = this.cells[myInfo.position.row][myInfo.position.column + 1]
						.CountIf_Players(player -> player.state == StateCode.Corpse);
			
			//상하좌우 시체가 있는경우 시체가 많은 쪽으로
			if(number_of_C[0]+number_of_C[1]+number_of_C[2]+number_of_C[3]!=0){
				for (int i = 0; i < number_of_C.length; i++) {
					if(number_of_C[i]>=max_number_of_C){
						max_number_of_C=number_of_C[i];
						index=i;
					}	
				}
				switch(index){
				case 0:
					result = DirectionCode.Up;
					break;
				case 1:
					result = DirectionCode.Down;
					break;					
				case 2:
					result = DirectionCode.Left;
					break;
				case 3:
					result = DirectionCode.Right;
					break;
				}
				
			}
			//주변에 시체가 없는경우
			else{
				result=DirectionCode.Stay;
			}
		}
		return result;
	}

	@Override
	public void Soul_Stay()
	{
		if ( turnInfo.turnNumber == 0 )
		{
			/*
			 * Note: 영혼 대기 메서드는 L4G 게임이 시작되면 가장 먼저 호출되는 메서드입니다.
			 * 		 이 if문의 내용은 0턴째에만 실행되므로, 이 곳은 여러분이 추가로 만든 변수들을 초기화하는 용도로 쓰기에 참 알맞습니다. 
			 */
			Init_Data();
		}

	}

	@Override
	public Point Soul_Spawn()
	{
		int max_row = -1;
		int max_column = -1;
		// Note: 이 메서드는 영혼 상태일 때 어디에 배치할지 결정하여 반환해야 하는 메서드입니다.
		//1. 가장 많은 감염자가 모여있는 칸에서 부활
		
		if(turnInfo.turnNumber == 0){//첫번째 턴에선 무조건 (2,2) 에서 부활
			max_row = 2;
			max_column = 2;
		}
		
		else//첫번째 턴이 아닌경우 감염체가 많은 곳에서 부활
		{
			int max_weight = 0;
			int min_distance = Constants.Classroom_Width * Constants.Classroom_Height;
			
			// 전체 칸을 검색하여 시체 및 감염체 수가 가장 많은 칸을 찾음
			for ( int row = 0; row < Constants.Classroom_Height; row++ )
			{
				for ( int column = 0; column < Constants.Classroom_Width; column++ )
				{
					CellInfo cell = this.cells[row][column];

					// int numberOfCorpses = cell.CountIf_Players(player -> player.state == StateCode.Corpse);
					int numberOfInfecteds = cell.CountIf_Players(player -> player.state == StateCode.Infected);
					
					int weight = numberOfInfecteds;
					int distance = favoritePoint.GetDistance(row, column);

					// 가장 많은 칸이 발견되면 갱신
					if ( weight > max_weight )
					{
						max_weight = weight;
						max_row = row;
						max_column = column;
						min_distance = distance;
					}
					// 가장 많은 칸이 여럿이면 그 중 '선호하는 칸'과 가장 가까운 칸을 선택
					else if ( weight == max_weight )
					{
						// 거리가 더 가까우면 갱신
						if ( distance < min_distance )
						{
							max_row = row;
							max_column = column;
							min_distance = distance;
						}
						// 거리마저 같으면 더 좋아하는 방향을 선택
						else if ( distance == min_distance )
						{
							for ( int iDirection = 0; iDirection < 4; iDirection++ )
							{
								Point adjacentPoint = favoritePoint.GetAdjacentPoint(directions[iDirection]);
								
								if ( adjacentPoint.GetDistance(row, column) < adjacentPoint.GetDistance(max_row, max_column) )
								{
									max_row = row;
									max_column = column;
									break;
								}
							} 
							
							//여기까지 왔다면 이제 그만 놓아 주자
						}
					}
				}
			}
			
		}



		return new Point(max_row, max_column);
	}
}
